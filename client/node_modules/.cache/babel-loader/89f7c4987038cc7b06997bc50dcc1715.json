{"ast":null,"code":"var _jsxFileName = \"/Users/debanikpurkayastha/Desktop/corona-aid/client/src/YourOffer.js\";\nimport React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useFormFields } from \"./libs/hooksLib\";\nimport fetch_a from './util/fetch_auth';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Toast from 'react-bootstrap/Toast';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyCikN5Wx3CjLD-AJuCOPTVTxg4dWiVFvxY\");\nexport default function YourOffer(props) {\n  const [fields, handleFieldChange] = useFormFields({\n    details: \"\"\n  });\n  const [availableText, setAvailableText] = useState('');\n  const [switchSelected, setSwitchSelected] = useState(false);\n  const [selectedTasks, setSelectedTasks] = useState([]);\n  const [currentUser, setCurrentUser] = useState({});\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [neighborhoodSelect, setNeighborhoodSelect] = useState({}); // const [taskSelect, setTaskSelect] = useState({});\n\n  const [getNeighborhoods, setNeighborhoods] = useState([]);\n  const possibleTasks = ['Groceries', 'Medicine/Health Care', 'Transportation', 'Pet Care', 'Child Care', 'Virtual Meetup'];\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch_a('/api/users/current');\n      response.json().then(user => {\n        setCurrentUser(user);\n        fields.details = user.offer.details ? user.offer.details : ''; // Get current lat and long from current location and find neighborhoods\n\n        const {\n          latitude,\n          longitude\n        } = props.state;\n        var neighborhoods = [];\n        Geocode.fromLatLng(latitude.toString(), longitude.toString()).then(response => {\n          for (var i = 0; i < Math.min(4, response.results.length); i++) {\n            const results = response.results[i]['address_components'];\n\n            for (var j = 0; j < results.length; j++) {\n              const types = results[j].types;\n\n              if (types.includes('neighborhood') || types.includes('locality')) {\n                const currNeighborhoodName = results[j]['long_name'];\n\n                if (neighborhoods.includes(currNeighborhoodName) === false) {\n                  neighborhoods.push(currNeighborhoodName); // Update select object\n\n                  setNeighborhoodSelect(prev => ({ ...prev,\n                    [currNeighborhoodName]: false\n                  }));\n                }\n              }\n            }\n          }\n        }, error => {\n          console.error(error);\n        }); // Update Neighborhoods from current user and found neighbors\n        // Combine with found neighborhoods/overwrite\n\n        const currentNeighborhoods = user.offer.neighborhoods;\n\n        for (var i = 0; i < currentNeighborhoods.length; i++) {\n          const currNeighborhoodName = currentNeighborhoods[i];\n          setNeighborhoodSelect(prev => ({ ...prev,\n            [currNeighborhoodName]: true\n          }));\n\n          if (neighborhoods.includes(currNeighborhoodName) === false) {\n            neighborhoods.push(currNeighborhoodName);\n          }\n        }\n\n        setNeighborhoods(neighborhoods); // Update tasks from current user\n\n        var tempTasks = [];\n\n        for (i = 0; i < possibleTasks.length; i++) {\n          const taskName = possibleTasks[i];\n          const currentUserTasks = user.offer.tasks;\n          const includedTask = currentUserTasks.includes(taskName) ? true : false;\n\n          if (includedTask) {\n            tempTasks.push(i);\n          }\n        }\n\n        setSelectedTasks(tempTasks);\n        setSwitchSelected(user.availability);\n        const aText = user.availability ? 'Available' : 'Not Available';\n        setAvailableText(aText); // for (i = 0; i < possibleTasks.length; i++) {\n        //     const taskName = possibleTasks[i];\n        //     const currentUserTasks = user.offer.tasks\n        //     const includedTask = (currentUserTasks.includes(taskName)) ? true : false\n        //     setTaskSelect(prev => ({ \n        //         ...prev,\n        //         [taskName]: includedTask,\n        //     }));\n        // }\n\n        setIsLoading(false);\n      });\n    }\n\n    fetchData();\n  }, [props.state]);\n\n  const checkInputs = () => {\n    var foundTrue = false;\n\n    for (const prop in neighborhoodSelect) {\n      if (neighborhoodSelect[prop] === true) {\n        foundTrue = true;\n      }\n    } // Didn't select neighborhood\n\n\n    if (foundTrue === false) {\n      setShowToast(true);\n      setToastMessage('No Neighborhood Selected');\n      return false;\n    } // If there are non selected\n\n\n    if (selectedTasks.length == 0) {\n      setShowToast(true);\n      setToastMessage('No Task Selected');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleUpdate = async e => {\n    e.preventDefault();\n\n    if (checkInputs() === false) {\n      return;\n    }\n\n    var taskList = [];\n\n    for (var i = 0; i < selectedTasks.length; i++) {\n      taskList.push(possibleTasks[selectedTasks[i]]);\n    }\n\n    var neighborList = [];\n\n    for (const prop in neighborhoodSelect) {\n      if (neighborhoodSelect[prop] === true) {\n        neighborList.push(prop);\n      }\n    }\n\n    let form = {\n      'offer': {\n        'tasks': taskList,\n        'neighborhoods': neighborList,\n        'details': fields.details\n      },\n      'location': {\n        'type': 'Point',\n        'coordinates': [props.state.longitude, props.state.latitude]\n      }\n    };\n    console.log(form);\n    fetch_a('/api/users/update', {\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(form)\n    }).then(response => {\n      if (response.ok) {\n        console.log(\"Offer successfully created\");\n        window.location.reload(true);\n      } else {\n        console.log(\"Offer not successful\");\n      }\n    }).catch(e => {\n      console.log(\"Error\");\n    });\n  };\n\n  const handleChange = (evt, neighborhood) => {\n    setNeighborhoodSelect(prev => ({ ...prev,\n      [neighborhood]: !neighborhoodSelect[neighborhood]\n    }));\n  };\n\n  const handleChangeTasks = val => {\n    setSelectedTasks(val);\n  };\n\n  const handleChangeSwitch = evnt => {\n    let form = {\n      'availability': !switchSelected\n    };\n    setSwitchSelected(!switchSelected);\n    const aText = !switchSelected ? 'Available' : 'Not Available';\n    setAvailableText(aText);\n    fetch_a('/api/users/update/', {\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(form)\n    }).then(response => {\n      if (response.ok) {\n        console.log(\"Update successful\");\n      } else {\n        console.log(\"Update not successful\");\n      }\n    }).catch(e => {\n      console.log(\"Error\");\n    });\n  };\n\n  if (isLoading) {\n    return React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 16\n      }\n    }, \"Loading ... \");\n  } else {\n    return React.createElement(\"div\", {\n      className: \"shadow p-3 mb-5 bg-white rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, React.createElement(Toast, {\n      show: showToast,\n      delay: 3000,\n      onClose: () => setShowToast(false),\n      autohide: true,\n      style: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        marginBottom: 60\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }, React.createElement(Toast.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }\n    }, toastMessage)), React.createElement(Col, {\n      md: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }\n    }), React.createElement(Col, {\n      md: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    }, React.createElement(Form, {\n      onSubmit: handleUpdate,\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 25\n      }\n    }, React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 29\n      }\n    }), React.createElement(Form.Label, {\n      style: {\n        marginBottom: -10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 29\n      }\n    }, React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 71\n      }\n    }, \"Availability\")), React.createElement(\"p\", {\n      style: {\n        fontWeight: 300,\n        fontStyle: 'italic'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 29\n      }\n    }, \"Switch on whether you are available to help.\"), React.createElement(Form.Check, {\n      type: \"switch\",\n      id: \"custom-switch\",\n      label: availableText,\n      checked: switchSelected,\n      onChange: handleChangeSwitch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 29\n      }\n    }), React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 29\n      }\n    }), React.createElement(Form.Group, {\n      controlId: \"tasks\",\n      bssize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 29\n      }\n    }, React.createElement(Form.Label, {\n      style: {\n        marginBottom: -10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 33\n      }\n    }, React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 75\n      }\n    }, \"Tasks\")), React.createElement(\"p\", {\n      style: {\n        fontWeight: 300,\n        fontStyle: 'italic'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 33\n      }\n    }, \"Select tasks with which you are willing to help.\"), React.createElement(ToggleButtonGroup, {\n      type: \"checkbox\",\n      className: \"btn-group flex-wrap\",\n      value: selectedTasks,\n      onChange: handleChangeTasks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 33\n      }\n    }, possibleTasks.map((task, i) => {\n      return React.createElement(ToggleButton, {\n        className: \"toggleButton\",\n        variant: \"outline-primary\",\n        size: \"md\",\n        key: i,\n        value: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 48\n        }\n      }, task);\n    }))), React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 29\n      }\n    }), React.createElement(Form.Group, {\n      controlId: \"details\",\n      bssize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 29\n      }\n    }, React.createElement(Form.Label, {\n      style: {\n        marginBottom: -10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 33\n      }\n    }, React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 75\n      }\n    }, \"Details\")), React.createElement(\"p\", {\n      style: {\n        fontWeight: 300,\n        fontStyle: 'italic'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 33\n      }\n    }, \"Give us more information on how you can help!\"), React.createElement(Form.Control, {\n      as: \"textarea\",\n      rows: \"3\",\n      value: fields.details,\n      onChange: handleFieldChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 33\n      }\n    })), React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 29\n      }\n    }), React.createElement(Form.Group, {\n      controlId: \"neighborhoods\",\n      bssize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 29\n      }\n    }, React.createElement(Form.Label, {\n      style: {\n        marginBottom: -10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 33\n      }\n    }, React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 75\n      }\n    }, \"Neighborhoods\")), React.createElement(\"p\", {\n      style: {\n        fontWeight: 300,\n        fontStyle: 'italic'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 33\n      }\n    }, \"Select the primary neighborhoods in which you can help.\"), getNeighborhoods.map(neighborhood => {\n      return React.createElement(Form.Check, {\n        key: neighborhood,\n        type: \"checkbox\",\n        label: neighborhood,\n        onChange: evt => {\n          handleChange(evt, neighborhood);\n        },\n        checked: neighborhoodSelect[neighborhood],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 44\n        }\n      });\n    })), React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 29\n      }\n    }), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 29\n      }\n    }, \"Update\"), React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 29\n      }\n    }), React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 29\n      }\n    }))), React.createElement(Col, {\n      md: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }\n    })));\n  }\n}","map":{"version":3,"sources":["/Users/debanikpurkayastha/Desktop/corona-aid/client/src/YourOffer.js"],"names":["React","useEffect","useState","useFormFields","fetch_a","Form","Button","Col","Row","Toast","ToggleButton","ToggleButtonGroup","Geocode","setApiKey","YourOffer","props","fields","handleFieldChange","details","availableText","setAvailableText","switchSelected","setSwitchSelected","selectedTasks","setSelectedTasks","currentUser","setCurrentUser","showToast","setShowToast","toastMessage","setToastMessage","isLoading","setIsLoading","neighborhoodSelect","setNeighborhoodSelect","getNeighborhoods","setNeighborhoods","possibleTasks","fetchData","response","json","then","user","offer","latitude","longitude","state","neighborhoods","fromLatLng","toString","i","Math","min","results","length","j","types","includes","currNeighborhoodName","push","prev","error","console","currentNeighborhoods","tempTasks","taskName","currentUserTasks","tasks","includedTask","availability","aText","checkInputs","foundTrue","prop","handleUpdate","e","preventDefault","taskList","neighborList","form","log","method","headers","body","JSON","stringify","ok","window","location","reload","catch","handleChange","evt","neighborhood","handleChangeTasks","val","handleChangeSwitch","evnt","position","bottom","right","marginBottom","textAlign","fontWeight","fontStyle","map","task"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useFormFields } from \"./libs/hooksLib\";\nimport fetch_a from './util/fetch_auth';\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Toast from 'react-bootstrap/Toast'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyCikN5Wx3CjLD-AJuCOPTVTxg4dWiVFvxY\");\n\n\nexport default function YourOffer(props) {\n    const [fields, handleFieldChange] = useFormFields({\n        details: \"\",\n    });\n\n    const [availableText, setAvailableText] = useState('');\n    const [switchSelected, setSwitchSelected] = useState(false);\n    const [selectedTasks, setSelectedTasks] = useState([]);\n    const [currentUser, setCurrentUser] = useState({});\n    const [showToast, setShowToast] = useState(false);\n    const [toastMessage, setToastMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    const [neighborhoodSelect, setNeighborhoodSelect] = useState({});\n    // const [taskSelect, setTaskSelect] = useState({});\n    const [getNeighborhoods, setNeighborhoods] = useState([]);\n    const possibleTasks = ['Groceries', 'Medicine/Health Care', 'Transportation',\n                           'Pet Care', 'Child Care', 'Virtual Meetup'];\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch_a('/api/users/current');\n            response.json().then((user) => {\n                setCurrentUser(user);\n                fields.details = user.offer.details ? user.offer.details : '';\n\n                // Get current lat and long from current location and find neighborhoods\n                const { latitude, longitude } = props.state;\n                var neighborhoods = [];\n                \n                Geocode.fromLatLng(latitude.toString(), longitude.toString()).then(\n                    response => {\n                        for (var i = 0; i < Math.min(4, response.results.length); i++) {\n                            const results = response.results[i]['address_components'];\n                            for (var j = 0; j < results.length; j++) {\n                                const types = results[j].types;\n                                if (types.includes('neighborhood') || types.includes('locality')) {\n                                    const currNeighborhoodName = results[j]['long_name'];\n                                    if (neighborhoods.includes(currNeighborhoodName) === false) {\n                                        neighborhoods.push(currNeighborhoodName);\n                                        // Update select object\n                                        setNeighborhoodSelect(prev => ({ \n                                            ...prev,\n                                            [currNeighborhoodName]: false,\n                                        }));\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    error => {\n                        console.error(error);\n                    }\n                );\n\n                // Update Neighborhoods from current user and found neighbors\n                // Combine with found neighborhoods/overwrite\n                const currentNeighborhoods = user.offer.neighborhoods;\n                for (var i = 0; i < currentNeighborhoods.length; i++) {\n                    const currNeighborhoodName = currentNeighborhoods[i];\n                    setNeighborhoodSelect(prev => ({ \n                        ...prev,\n                        [currNeighborhoodName]: true,\n                    }));\n                    if (neighborhoods.includes(currNeighborhoodName) === false) {\n                        neighborhoods.push(currNeighborhoodName);\n                    }\n                }\n                setNeighborhoods(neighborhoods);\n\n                // Update tasks from current user\n                var tempTasks = [];\n                for (i = 0; i < possibleTasks.length; i++) {\n                    const taskName = possibleTasks[i];\n                    const currentUserTasks = user.offer.tasks;\n                    const includedTask = (currentUserTasks.includes(taskName)) ? true : false;\n                    if (includedTask) {\n                        tempTasks.push(i);\n                    }\n                }\n                setSelectedTasks(tempTasks);\n                setSwitchSelected(user.availability);\n                const aText = user.availability ? 'Available' : 'Not Available'\n                setAvailableText(aText);\n                // for (i = 0; i < possibleTasks.length; i++) {\n                //     const taskName = possibleTasks[i];\n                //     const currentUserTasks = user.offer.tasks\n                //     const includedTask = (currentUserTasks.includes(taskName)) ? true : false\n                //     setTaskSelect(prev => ({ \n                //         ...prev,\n                //         [taskName]: includedTask,\n                //     }));\n                // }\n                setIsLoading(false);\n            });\n        }\n        fetchData();\n    \n    }, [props.state]);\n\n    const checkInputs = () => {\n        var foundTrue = false;\n        for (const prop in neighborhoodSelect) {\n            if (neighborhoodSelect[prop] === true) {\n                foundTrue = true;\n            }\n        }\n\n        // Didn't select neighborhood\n        if (foundTrue === false) {\n            setShowToast(true);\n            setToastMessage('No Neighborhood Selected');\n            return false;\n        }\n\n        // If there are non selected\n        if (selectedTasks.length == 0) {\n            setShowToast(true);\n            setToastMessage('No Task Selected');\n            return false;\n        }\n\n        return true\n    }\n\n    const handleUpdate = async e => {\n        e.preventDefault();\n        if (checkInputs() === false) {\n            return;\n        }\n\n        var taskList = [];\n        for (var i = 0; i < selectedTasks.length; i++) {\n            taskList.push(possibleTasks[selectedTasks[i]]);\n        }\n\n        var neighborList = [];\n        for (const prop in neighborhoodSelect) {\n            if (neighborhoodSelect[prop] === true) {\n                neighborList.push(prop);\n            }\n        }\n\n        let form = {\n            'offer': {\n                'tasks': taskList,\n                'neighborhoods': neighborList,\n                'details': fields.details,\n            },\n            'location': {\n                'type': 'Point',\n                'coordinates': [props.state.longitude, props.state.latitude]\n            }\n        };\n        console.log(form);\n        fetch_a('/api/users/update', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(form)\n        })\n        .then((response) => {\n            if (response.ok) {\n                console.log(\"Offer successfully created\");\n                window.location.reload(true);\n            } else {\n                console.log(\"Offer not successful\")\n            }\n        })\n        .catch((e) => {\n            console.log(\"Error\");\n        });\n    };\n\n    const handleChange = (evt, neighborhood) => {\n        setNeighborhoodSelect(prev => ({ \n            ...prev,\n            [neighborhood]: !neighborhoodSelect[neighborhood],\n        }));\n    }\n\n    const handleChangeTasks = (val) => {\n        setSelectedTasks(val);\n    };\n\n    const handleChangeSwitch = (evnt) => {\n        let form = {\n          'availability': !switchSelected\n        };\n        setSwitchSelected(!switchSelected);\n        const aText = !switchSelected ? 'Available' : 'Not Available'\n        setAvailableText(aText);\n\n        fetch_a('/api/users/update/', {\n          method: 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(form)\n        })\n        .then((response) => {\n            if (response.ok) {\n              console.log(\"Update successful\");\n            } else {\n              console.log(\"Update not successful\");\n            }\n        })\n        .catch((e) => {\n            console.log(\"Error\");\n        });\n      }\n\n    if (isLoading) {\n        return <div>Loading ... </div>;\n    } else {\n        return (\n            <div className=\"shadow p-3 mb-5 bg-white rounded\">\n                <Row >\n                    <Toast\n                        show={showToast}\n                        delay={3000}\n                        onClose={() => setShowToast(false)}\n                        autohide\n                        style={{\n                            position: 'absolute',\n                            bottom: 0,\n                            right: 0,\n                            marginBottom: 60,\n                        }}\n                    >\n                        <Toast.Body>{toastMessage}</Toast.Body>\n                    </Toast>\n                    <Col md={1}>\n                    </Col>\n                    <Col md={10} >\n                        {/* <Row> */}\n                        <Form onSubmit={handleUpdate} style = {{textAlign: \"left\"}}>\n                            <br></br>\n                            <Form.Label style = {{marginBottom: -10}}><h3>Availability</h3></Form.Label>\n                            <p style = {{fontWeight: 300, fontStyle: 'italic'}}>Switch on whether you are available to help.</p>\n                            <Form.Check \n                                type=\"switch\"\n                                id=\"custom-switch\"\n                                label={availableText}\n                                checked={switchSelected}\n                                onChange={handleChangeSwitch}\n                            />\n                            <br></br>\n                            <Form.Group controlId=\"tasks\" bssize=\"large\">\n                                <Form.Label style = {{marginBottom: -10}}><h2>Tasks</h2></Form.Label>\n                                <p style = {{fontWeight: 300, fontStyle: 'italic'}}>Select tasks with which you are willing to help.</p>\n                                {/* {possibleTasks.map((task) => {\n                                    return <Form.Check key={task} \n                                                    type = \"checkbox\" \n                                                    label = {task}\n                                                    onChange = {(evt) => { handleTaskChange(evt, task) }}\n                                                    checked = {taskSelect[task]} />\n                                })} */}\n                                <ToggleButtonGroup type=\"checkbox\" className=\"btn-group flex-wrap\" value={selectedTasks} onChange={handleChangeTasks}>\n                                    {possibleTasks.map((task, i) => {\n                                        return <ToggleButton className=\"toggleButton\" variant=\"outline-primary\" size=\"md\" key = {i} value={i}>{task}</ToggleButton>\n                                    })}\n                                </ToggleButtonGroup>\n                            </Form.Group>\n                            <br></br>\n                            <Form.Group controlId=\"details\" bssize=\"large\">\n                                <Form.Label style = {{marginBottom: -10}}><h3>Details</h3></Form.Label>\n                                <p style = {{fontWeight: 300, fontStyle: 'italic'}}>Give us more information on how you can help!</p>\n                                <Form.Control as=\"textarea\" \n                                              rows=\"3\" \n                                              value={fields.details} \n                                              onChange={handleFieldChange}/>\n                            </Form.Group>\n                            <br></br>\n                            <Form.Group controlId=\"neighborhoods\" bssize=\"large\">\n                                <Form.Label style = {{marginBottom: -10}}><h3>Neighborhoods</h3></Form.Label>\n                                <p style = {{fontWeight: 300, fontStyle: 'italic'}}>Select the primary neighborhoods in which you can help.</p>\n                                {getNeighborhoods.map((neighborhood) => {\n                                    return <Form.Check key={neighborhood} \n                                                    type = \"checkbox\" \n                                                    label = {neighborhood}\n                                                    onChange = {(evt) => { handleChange(evt, neighborhood) }}\n                                                    checked = {neighborhoodSelect[neighborhood]} />\n                                })}\n                            </Form.Group>\n                            <br></br>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Update\n                            </Button>\n                            <br></br>\n                            <br></br>\n                        </Form>\n                        {/* </Row> */}\n                    </Col>\n                    <Col md={1}></Col>\n                </Row>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}